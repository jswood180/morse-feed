#!/usr/bin/ucode -S

/**
 * Used by the Range Testing application for running background commands.
 * 
 * The goal is to eventually move everything into the backend here with 
 * the frontend range testing UI being as dumb as possible. This is an
 * interim solution for the sake of time. The frontend will not have to 
 * do any specific error handling and will only receive a UBUS/RPC code if 
 * errors are encountered.
 * 
 * Background commands create process output files in /var/run/rangetest/<id>.
 * 
 * API Schema:
 *  - background_iperf3_server() => { id }
 *  - background_iperf3_client() => { id, udp, reverse }
 *  - background_iperf3_result( id ) => json_blob
 *  - iw_station_dump() => { interface_1: "...", interface_2: "..." }
 *  - morse_cli_stats_reset() => nothing
 *  - morse_cli_stats() => json_blob
 *  - morse_cli_channel() => json_blob
 *  - ip_link() => { interface_1: {...}, interface_2: {...} }
 */

import * as ubus from 'ubus';
const fs = require('fs');
const uloop = require('uloop');
const math = require('math');

/* This is weird because running the iperf3 server
 * with -s -1 --json will not produce any output
 * until the end, so assume that no iperf test runs > 5 minutes.
 */
const OUTPUT_DIR_TTL = 300;
const IPERF_OMIT_TIME = 2;
const BG_OUTPUT_DIR = '/var/run/rangetest';

function get_output_file_paths(id) {
	return {
		stdout: `${BG_OUTPUT_DIR}/${id}/stdout`,
		stderr: `${BG_OUTPUT_DIR}/${id}/stderr`,
		exit_code: `${BG_OUTPUT_DIR}/${id}/exit_code`,
	};
}

/**
 * Delete a process output directory and all files inside.
 *
 * @param id name of the process output directory in /var/run/rangetest
 * @returns true if success else null if directory inaccesssible
 */
function delete_output_directory(id) {
	const dir = `${BG_OUTPUT_DIR}/${id}`;
	if (!fs.access(dir, 'f')) { exit(ubus.STATUS_SYSTEM_ERROR); }
	const output_file_paths = get_output_file_paths(id);
	for (file in output_file_paths) {
		fs.unlink(output_file_paths[file]);
	}
	fs.rmdir(dir);
}

/**
 * Delete all the process output directories.
 * 
 * This is predicated on the rangetest only ever being run one at a time
 * and should only be called alongside the `killall -q iperf3` commands.
 */
function clean_output_directories() {
	if (!fs.access(BG_OUTPUT_DIR, 'f')) { return; }

	const output_directories = fs.lsdir(BG_OUTPUT_DIR);
	if (!output_directories) { exit(ubus.STATUS_SYSTEM_ERROR); }

	for (dir in output_directories) { delete_output_directory(dir); }
}

function execute_background_command(command) {
	const id = math.rand();

	if (!fs.access(BG_OUTPUT_DIR, 'f')) {
		if (!fs.mkdir(BG_OUTPUT_DIR)) { 
			exit(ubus.STATUS_SYSTEM_ERROR);
		}
	}
	if (!fs.mkdir(`${BG_OUTPUT_DIR}/${id}`)) { 
		exit(ubus.STATUS_SYSTEM_ERROR);
	}

	const output_file_paths = get_output_file_paths(id);
	for (file in output_file_paths) {
		const n_bytes_written = fs.writefile(output_file_paths[file], null);
		if (n_bytes_written == null) { 
			exit(ubus.STATUS_SYSTEM_ERROR);
		}
	}

	const stdout_redirect_param = ` 1>${output_file_paths.stdout}`;
	const stderr_redirect_param = ` 2>${output_file_paths.stderr}`;
	command += `${stdout_redirect_param} ${stderr_redirect_param}`;
	const proc = uloop.task((pipe) => {
		/* Has cover-all 10 minute timeout for hanging
		 * iperf3 servers. Since the frontend knows the expected 
		 * time each iperf test will take this timeout could be adjusted
		 * to a more appropriate per-test value in future.
		 */
		const exit_code = system(command, 6000000);
		fs.writefile(output_file_paths.exit_code, exit_code);
	});
	if (!proc) { exit(ubus.STATUS_SYSTEM_ERROR); }

	return { id: id };
}

function background_iperf3_server(req) {
	system('killall -q iperf3', 1000);
	clean_output_directories();
	const command = 'iperf3 -s -1 --json';
	return execute_background_command(command);
}

function background_iperf3_client(req) {
	const target = req.args.target;
	const udp = req.args.udp ? '-u -b 40M/30' : '-Z';
	const reverse = req.args.reverse ? '-R' : '';
	const time = req.args.time;
	if (time <= IPERF_OMIT_TIME || time >= OUTPUT_DIR_TTL) { exit(ubus.STATUS_INVALID_ARGUMENT); } 
	if (iptoarr(target) == null) { exit(ubus.STATUS_INVALID_ARGUMENT); } 

	system('killall -q iperf3', 1000);
	clean_output_directories();
	const command = `iperf3 -c ${target} ${udp} ${reverse} -t ${time} -O ${IPERF_OMIT_TIME} --json`;
	return execute_background_command(command);
}

function get_background(req) {
	const id = req.args.id;

	const output_file_paths = get_output_file_paths(id);
	const output_data = {};
	for (file in output_file_paths) {
		if (!fs.access(output_file_paths[file], 'f')) {	exit(ubus.STATUS_SYSTEM_ERROR); }
		output_data[file] = fs.readfile(output_file_paths[file]);
	}

	/* The background iperf is ongoing, there will be no output 
	 * due to the `--json` flag.
	 */
	if (output_data.exit_code == '') {
		return {};
	}
	
	/* The background iperf is complete, there output
	 * should be json formatted due to the `--json` flag.
	 */
	if (output_data.exit_code == '0') { 
		return json(output_data.stdout);
	}
	exit(ubus.STATUS_SYSTEM_ERROR); 
}

function execute_command(command) {
	let proc = fs.popen(command);
	if (!proc) { exit(ubus.STATUS_SYSTEM_ERROR); }
	const output = proc.read('all');
	const exit_code = proc.close();
	return { 
		output: output, 
		exit_code: exit_code 
	};
}

function get_morse_devices() {
	let devices = [];
	const ls_entries = fs.lsdir('/sys/class/net/');
	let ls_entry;
	for (ls_entry in ls_entries) {
		const morse_device_path = `/sys/class/net/${ls_entry}/device/morse`;
		if (fs.access(morse_device_path, 'f')) {
			push(devices, ls_entry);
		}
	}
	return devices;
}

function iw_station_dump(req) {
	const devices = get_morse_devices();
	let output = {};
	let device, results;
	for (device in devices) {
		results = execute_command(`iw ${device} station dump`);
		if (results.exit_code == 0) {
			output[device] = results.output;
		} else {
			output[device] = '';
		}
	}
	return output;
}


function morse_cli_stats_reset(req) {
	const devices = get_morse_devices();
	let device, results;
	for (device in devices) {
		results = execute_command(`morse_cli -i ${device} stats -r`);
		if (results.exit_code == 0) { return {}; }
	}
	exit(ubus.STATUS_SYSTEM_ERROR);
}

/**
 * Collect the first valid output of morse_cli stats.
 * 
 * Assumes that there is only ever 1 morse chip.
 */
function morse_cli_stats(req) {
	const devices = get_morse_devices();
	let device, results;
	for (device in devices) {
		results = execute_command(`morse_cli -i ${device} stats -j`);
		if (results.exit_code == 0) { return json(results.output); }
	}
	exit(ubus.STATUS_SYSTEM_ERROR);
}

/**
 * Collect the first valid output of morse_cli channel.
 * 
 * Assumes that there is only ever 1 morse chip.
 */
function morse_cli_channel(req) {
	const devices = get_morse_devices();
	let device, results;
	for (device in devices) {
		results = execute_command(`morse_cli -i ${device} channel -j`);
		if (results.exit_code == 0) { return json(results.output); }
	}
	exit(ubus.STATUS_SYSTEM_ERROR);
}

function ip_link(req) {
	const devices = get_morse_devices();
	let output = {};
	let device, results, json_results;
	for (device in devices) {
		results = execute_command(`ip -j -d link show ${device}`);
		if (results.exit_code == 0) {
			json_results = json(results.output);
			output[device] = json_results[0];
		} else {
			output[device] = '';
		}
	}
	return output;
}

return {
	rangetest: {
		background_iperf3_server: {
			call: background_iperf3_server,
		},
		background_iperf3_client: {
			call: background_iperf3_client,
			args: {
				target: '192.168.1.1',
				udp: true,
				reverse: false,
				time: 10,
			},
		},
		get_background: {
			call: get_background,
			args: {
				id: 123,
			},
		},
		iw_station_dump: {
			call: iw_station_dump,
		},
		morse_cli_stats_reset: {
			call: morse_cli_stats_reset,
		},
		morse_cli_stats: {
			call: morse_cli_stats,
		},
		morse_cli_channel: {
			call: morse_cli_channel,
		},
		ip_link: {
			call: ip_link,
		},
	},
};
