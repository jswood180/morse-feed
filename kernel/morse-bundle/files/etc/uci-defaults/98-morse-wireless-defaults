#!/bin/sh

# This file applies the 'default' wifi setup for Morse devices, ideally based on information
# from persistent-vars-storage.sh. If persistent-vars-storage.sh is not present, it will
# fall back to randomisation (and for country, nothing, to avoid breaking any regulations).
# Since it should only be run after hotplug, and it's designed for Morse products, we keep
# it out of board.d.

. /lib/functions.sh
. /lib/netifd/morse/morse_utils.sh
. /lib/functions/system.sh


default_ssid=$(uci get system.@system[0].hostname 2>/dev/null)
default_wifi_key="$(persistent_vars_storage.sh READ default_wifi_key)"
if [ -z "$default_wifi_key" ]; then
	default_wifi_key=$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 8)
fi
uci set "system.@system[0].default_wifi_key=$default_wifi_key"
mm_region="$(persistent_vars_storage.sh READ mm_region)"

_get_iface() {
	uci get "wireless.default_$1.$2"
}

_change_device_defaults() {
	local config="$1"

	# If the device is enabled, it's already mutated from its default config
	# so we shouldn't touch it.
	config_get disabled "$config" disabled
	if [ "$disabled" != 1 ]; then
		return
	fi

	# Only setup one device in each band.
	config_get device_band "$config" band
	if eval "[ device_band_$device_band = 1 ]"; then
		return 1
	fi
	eval "device_band_$device_band=1"

	if [ "$device_band" = "s1g" ]; then
		# It's probably been setup by our HaLow hotplug.
		# Only change if it's in the default state
		# (otherwise we're probably running on a sysupgrade).
		if [ "$(_get_iface "$config" ssid)" = MorseMicro ] &&
			[ "$(_get_iface "$config" mode)" = ap ] &&
			[ "$(_get_iface "$config" encryption)" = sae ] &&
			[ "$(_get_iface "$config" key)" = 12345678 ]; then
				# It's only safe to enable a morse device if we know what region it should be.
				# If we do, set up the country and channel, otherwise leave it disable.
				if [ -n "$mm_region" ]; then
					# Start on the highest bandwidth channel for the country code. netifd
					# does fill a channel automatically, but it may be for the wrong region.
					# Channels can be queried from iwinfo or the driver, but not if the
					# device is down, and the device is not up until we have a valid channel.
					local channel="$(awk < /usr/share/morse-regdb/channels.csv -F, '$1 == "'"$mm_region"'" {print $2, $3}' \
						| sort -n | awk 'END {print $2}')"

					echo "uci-default-morse-wireless: setting $config to $mm_region on $channel" > /dev/kmsg
					uci batch <<- END
						delete wireless.$config.disabled
						set wireless.$config.country='$mm_region' 
						set wireless.$config.channel='$channel' 
					END
				fi

				uci batch <<- END
					set wireless.default_$config.ssid='$default_ssid'
					set wireless.default_$config.mesh_id='$default_ssid'
					set wireless.default_$config.key='$default_wifi_key'
					set wireless.default_$config.encryption='sae'
				END
		fi
	else
		# It's probably a 'normal' wifi-device.
		# Only change if it's in the default state
		# (otherwise we're probably running on a sysupgrade).
		if [ "$(_get_iface "$config" ssid)" = OpenWrt ] &&
			[ "$(_get_iface "$config" mode)" = ap ] &&
			[ "$(_get_iface "$config" encryption)" = none ]; then

				uci batch <<- END
					delete wireless.$config.disabled
					set wireless.$config.country='$mm_region'
					set wireless.default_$config.ssid='$default_ssid'
					set wireless.default_$config.mesh_id='$default_ssid'
					set wireless.default_$config.key='$default_wifi_key'
					set wireless.default_$config.encryption='psk2'
				END
		fi
	fi
}

# Wait if we need to for the morse hotplug to finish, since we can
# be reasonably sure that there should be a morse device.
# This isn't a proper solution to this problem (i.e. the raciness
# of the hotplug vs uci-defaults), but we also can't trivially
# attach to the existing hotplug because the uboot env setup only
# runs in uci-defaults (and we sometimes need this for
# persistent_vars_storage.sh).
wait_for_morse_device() {
	local found_device=0
	local attempt

	for attempt in 1 2 3 4 5; do
		_find_morse_device() {
			local type
			config_get type "$1" type
			if [ "$type" = morse ]; then
				found_device=1
			fi
		}

		config_foreach _find_morse_device wifi-device

		if [ "$found_device" = 1 ]; then
			return
		fi

		sleep 1
		config_load wireless
	done
}

config_load wireless
wait_for_morse_device
config_foreach _change_device_defaults wifi-device
