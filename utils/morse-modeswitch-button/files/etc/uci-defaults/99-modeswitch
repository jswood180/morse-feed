#!/bin/sh
# Copyright 2024 Morse Micro

# Configure a device based on a uboot env variable (mm_mode).
# Possible values for mm_mode are currently:
#   unset: initial
#   ap: I want you to configure this device as an AP
#   sta: I want you to configure this device as a STA

# Because this uci-defaults (i.e. this script) is run before syslog
# is configured, we send the output to /dev/kmsg.

# States are changed either by this script or BTN_0 (see rc.d/BTN_0).
#
# Currently:
#   0. script: unset -> ap
#   1. BTN_0 for 5 to 10 seconds:  ap
#   2. BTN_0 for 10 or more seconds:  sta

. /lib/functions.sh

_find_morse_device() {
	# Enable the morse wifi-device and store in _wifi_device_name
	local section_name="$1"

	if [ "$(config_get "$section_name" type)" = "morse" ]; then
		_morse_device_name="$section_name"
	fi
}

# If it's an upgrade, do not attempt to reconfigure.
if [ -f /sysupgrade.tgz ]; then
	# This is a bit tricky. The 80_mount_root script in preinit uses
	# this file to do sysupgrade, and it's not removed until the 'done' service
	# is run at START=95, so we can detect whether we're in an upgrade
	# by looking at this file.
	echo "modeswitch: not attempting modeswitch since this is an upgrade" > /dev/kmsg
	exit 0
fi

mode="$(persistent_vars_storage.sh READ mm_mode 2> /dev/null)"
if [ -z "$mode" ]; then
	# For now, we default to configuring as an AP.
	# This allows an easy demo without needing uboot env
	# set on the device before flashing or doing complex
	# things to move out of some kind of partial state
	# (where we have a sta up to do the DPP but also have
	# the management interface accessible).
	# APP-2988 to fix before release.
	mode="ap"
	persistent_vars_storage.sh WRITE mm_mode ap
fi

if [ "$mode" != sta ] && [ "$mode" != ap ]; then
	echo "modeswitch: '$mode' not understood" > /dev/kmsg
	exit 1
fi

config_load wireless
config_foreach _find_morse_device wifi-device
if [ -z "$_morse_device_name" ]; then
	# Note that 98-morse-wireless-defaults should already have done a sleep at this point.
	echo "modeswitch: unable to find morse device to switch mode; reboot to retry" > /dev/kmsg
	exit 1
fi

echo "modeswitch: configuring as '$mode' (mm_mode)" > /dev/kmsg

uci set "wireless.default_$_morse_device_name.mode=$mode"

if [ "$mode" = "sta" ]; then
	# Switch to dhcp client and turn off server.
	# Disable powersave since this is currently only used for
	# Artini Extenders (i.e. where power is not a concern).
	uci batch <<- END
		set wireless.default_$_morse_device_name.powersave=0
		delete wireless.default_$_morse_device_name.ssid
		delete wireless.default_$_morse_device_name.mesh_id
		delete wireless.default_$_morse_device_name.key
		set network.lan.proto=dhcp
		set dhcp.lan.ignore=1
	END

	wandevice="$(uci get network.wan.device)"
	if [ -n "$wandevice" ]; then
		# Bridge all ports for station.
		uci add_list "network.@device[0].ports=$wandevice"
		uci delete network.wan.device
	fi
fi

exit 0